---
# tasks file for drone

- name: install pip
  apt: name=python-pip cache_valid_time=86400 update_cache=yes

- name: install docker-py
  pip: name=docker-py version=0.3.0

- name: see if drone is already installed
  stat: path=/usr/local/bin/drone
  register: drone_stat

- name: ensure /etc/drone exists
  file: path=/etc/drone state=directory owner=root group=root mode=0700

- name: should drone be installed
  set_fact: install_drone={{ not drone_stat.stat.exists or upgrade_drone|default(False)|bool == True }}

- name: pull down latest deb file
  get_url: url=http://downloads.drone.io/latest/drone.deb dest=/tmp/drone.deb force={{ install_drone|default(False)|bool }}
  register: got_drone

- name: install drone
  command: dpkg --force-confdef --force-confold -i /tmp/drone.deb
  environment:
    DEBIAN_FRONTEND: noninteractive
    DEBIAN_PRIORITY: critical
  register: drone_dpkg
  when: install_drone|default(False)|bool
  notify:
    - restart drone

- name: configure drone daemon
  template: src=default.j2 dest=/etc/default/drone owner=root group=root mode=0644
  notify:
    - restart drone

- name: ensure the drone user exists
  mysql_user: name={{ drone_mysql_user }} state=present password={{ drone_mysql_pass }} priv={{ drone_mysql_dbname}}.*:ALL
  when: drone_driver == 'mysql'

- name: ensure the drone database exists
  mysql_db: name={{ drone_mysql_dbname }} state=present
  when: drone_driver == 'mysql'

- name: restore from backup
  mysql_db: name={{ drone_mysql_dbname }} state=import target={{ drone_mysql_backup }}
  when: drone_mysql_backup is defined

- name: setup ssl cert
  copy: src={{ drone_sslcert_file }} dest={{ drone_sslcert_location }} owner=root group=root mode=0644
  when: drone_scheme == 'https'

- name: setup ssl key
  copy: src={{ drone_sslkey_file }} dest={{ drone_sslkey_location }} owner=root group=root mode=0644
  when: drone_scheme == 'https'

- name: ensure drone is started
  service: name=drone state=started enabled=yes
